import type { TypeErrorMessage } from '~/types/asyncData';

const { fetchToneOfVoiceOptions } = showcaseApi();
const { fetchIndustryOptions } = registrationBusinessApi();

export const useShowcase = () => {
  const selections = useState('selections', () => ({
    industry: '',
    tone_of_voice: '',
  }));

  type TypePostData = {
    post_image: string;
    post_text: string;
    tip: string;
    percentage: string;
    chartData: number[];
    total: number | null;
  };

  const postData = useState(
    'postData',
    (): TypePostData => ({
      post_image: '',
      post_text: '',
      tip: '',
      chartData: [],
      percentage: '',
      total: null,
    }),
  );

  const industryOptions = useState('industryOptions', (): string[] => []);
  const toneOfVoiceOptions = useState('toneOfVoiceOptions', (): string[] => []);
  const errorMessageIndustry = useState('errorMessageIndustry', () => '');
  const errorMessageToneOfVoice = useState('errorMessageToneOfVoice', () => '');
  const hasAutoGenerated = useState('hasAutoGenerated', () => false);

  const getIndustryOptions = async () => {
    try {
      const response = await fetchIndustryOptions();
      industryOptions.value = response.data.map(item => item.name);
    } catch (error) {
      const typedError = error as TypeErrorMessage;
      errorMessageIndustry.value = typedError.data?.message;
    }
  };

  const getToneOfVoiceOptions = async () => {
    try {
      const response = await fetchToneOfVoiceOptions();
      toneOfVoiceOptions.value = response.data.map(item => item.name);
    } catch (error) {
      const typedError = error as TypeErrorMessage;
      errorMessageToneOfVoice.value = typedError.data?.message;
    }
  };

  const pickRandomOptions = () => {
    // Pick a random index from the industry and tone of voice options
    const randomIndexIndustry = Math.floor(
      Math.random() * industryOptions.value.length,
    );
    const randomIndexToneOfVoice = Math.floor(
      Math.random() * toneOfVoiceOptions.value.length,
    );

    // Update the selected industry and tone of voice values
    selections.value.industry = industryOptions.value[randomIndexIndustry];
    selections.value.tone_of_voice
      = toneOfVoiceOptions.value[randomIndexToneOfVoice];
  };

  return {
    selections,
    postData,
    industryOptions,
    toneOfVoiceOptions,
    errorMessageIndustry,
    errorMessageToneOfVoice,
    hasAutoGenerated,
    getIndustryOptions,
    getToneOfVoiceOptions,
    pickRandomOptions,
  };
};
